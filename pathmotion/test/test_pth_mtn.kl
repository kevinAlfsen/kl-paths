PROGRAM test_pth_mtn
%NOBUSYLAMP
%COMMENT = 'test motion paths'
%NOPAUSESHFT
%NOPAUSE = ERROR + TPENABLE + COMMAND
%NOABORT = ERROR + COMMAND

%ifdef DEBUG_BUILD
%define SHOW_DEBUG FALSE
%define LOG_NAME 'RD:path_debug.DT'
%include display.c.klt
%endif

%define M_PI 3.14159

%include systemlib.types.klt
%include systemvars.klt
%include pose.const.klt
%include draw.klt
%include pathlib.klt
%include toolpath.structs.klt

VAR
--pathplan parameters
%defeval OD_CORNER LEFT_TOP
%defeval ID_CORNER LEFT_BOTTOM
%defeval PLATE_CORNER RIGHT_BOTTOM
--robot config parameters
%define USER_FRAME_CUT_NO 9
%define USER_FRAME_VERT_NO 7
--motion parameters
%define TOOLING_STEP 6
%define LINKING_STEP 10
%define TOOLING_SPEED 50
%define LINKING_SPEED 100
  contours : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_VEC_PATH
  polygon : PATH nodedata = t_VERTEX
  ppath : PATH nodedata = t_POS_PATH
  path_plan : PATH nodedata = t_INTEGER
  pth : PATH nodedata = t_TOOLPATH

%from systemlib.klh %import VEC, VEC2D
%include pose.klh
%from math.klh %import bitmask
%from strings.klh %import i_to_s, p_to_s, pose_to_s
%from registers.klh %import set_real, set_int
%from draw.klh %import hexagon
%include pathlib.klh

--polygon object
%class tstcanv('canvas.klc', 'canvas.klh')
--path object
%class tstpth('pathmake.klc','pathmake.klh','defaultpath.klt')
--motion object
%class tstmtn('motion.klc','motion.klh','defaultpath.klt')

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif

ROUTINE clear_poly(p : PATH nodedata = t_VERTEX)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_poly

ROUTINE clear_list(p : PATH nodedata = t_INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_list

ROUTINE append_nodes(p : PATH nodedata = t_VERTEX; nodes : INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO nodes DO
      APPEND_NODE(p,status)
    ENDFOR
  END append_nodes

ROUTINE draw_delta
  BEGIN
    --create polygon
    clear_poly(polygon)
    append_nodes(polygon, 8)   
    polygon[1].coords = VEC2D(-40,10)   
    polygon[2].coords = VEC2D(-10,40)   
    polygon[3].coords = VEC2D(0,0)
    polygon[4].coords = VEC2D(10,40)
    polygon[5].coords = VEC2D(40,10)
    polygon[6].coords = VEC2D(20,60)  
    polygon[7].coords = VEC2D(0,120)
    polygon[8].coords = VEC2D(-20,60)

  END draw_delta

ROUTINE draw_pad(width, length : REAL; seperation : REAL; no_of_pads : INTEGER; start : VECTOR)
  VAR
    i : INTEGER
  BEGIN
    --create polygon
    clear_poly(polygon)
    append_nodes(polygon, 4)

    FOR i=0 TO no_of_pads-1 DO
      polygon[1].coords = start + i*VEC2D(seperation, 0)
      polygon[2].coords = start + i*VEC2D(seperation, 0) + VEC2D(width,0)
      polygon[3].coords = start + i*VEC2D(seperation, 0) + VEC2D(width,length)
      polygon[4].coords = start + i*VEC2D(seperation, 0) + VEC2D(0,length)
      
      tstcanv__append_polygon(polygon)
    ENDFOR
  END draw_pad

ROUTINE t_hexagon
  VAR
%define hex_radius 50
%define num_of_points 5
%define TOOL_ORIENT 20,0,0
%define RETRACT_HEIGHT 10
%define PAD_IDOD 1
%define DRAW_HEIGHT 0
    i, status : INTEGER
    rast_ang : INTEGER
    overlap : REAL
    wall_lines : INTEGER
    bbox : t_RECT
    cds : t_COORD_SYS
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
  BEGIN

    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_CUT_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)

    --draw hexagon
    rast_ang = 0
    overlap = 6
    wall_lines = 1

    clear_poly(polygon)
    draw__hexagon(hex_radius, num_of_points, POS(hex_radius,hex_radius,0,0,0,0,(ZEROPOS(1).Config_data)), polygon)

    --draw pads
      -- (frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, (rast_ang), 1, wall_lines, 0, overlap)
     --append polygon into object
    tstcanv__append_polygon(polygon)

    --get raster lines
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)
    
    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    tstcanv__lines_to_vec_path(lines) ; tstcanv__contours_to_vec_path(contours) ;

    frm = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CARTESAN, Z_AXES)
    origin = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT,pose__set_config(DEFAULT_CONFIG))

    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod
    tstpth__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstmtn__init(tool, DRAW_HEIGHT, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, FALSE)

    --generate path
     --(lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstpth__planPath(lines, contours, PLATE_CORNER, ONEWAY, FALSE)

    -- approach path
    tstmtn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))
    
    --move through path
    tstmtn__movePoly(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT), TRUE)

    -- retract path
    tstmtn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    UNLOCK_GROUP(math__bitmask(RBT_GRP),status)

    RETURN

  END t_hexagon

ROUTINE t_pvert_ID
  VAR
%define PAD_RADIUS 100
%defeval PAD_WIDTH 360*PAD_RADIUS*M_PI/180
%define PAD_LENGTH 20
%defeval PAD_SEPERATION 0*PAD_RADIUS*M_PI/180
%define PAD_START_DEG 0*PAD_RADIUS*M_PI/180
%define NO_OF_PADS 1
%define RETRACT_RADIUS 40
%defeval RETRACT_HEIGHT (RETRACT_RADIUS-PAD_RADIUS)
%define PAD_IDOD -1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%defeval TOOLING_STEP 90
%defeval LINKING_STEP 90
    i, status : INTEGER
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    bbox : t_RECT
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_VERT_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)

    --draw pads
    -- (frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))

    --get raster lines
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstcanv__lines_to_vec_path(lines) ;

    frm = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(PAD_START_DEG,0,PAD_RADIUS,0,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT_UP,pose__set_config(DEFAULT_CONFIG))

    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod
    tstpth__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstmtn__init(tool, PAD_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
    bbox = tstcanv__get_bounding_box_drawing
      --(lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstpth__planPath(lines, contours, ID_CORNER, ONEWAY, FALSE)

    -- approach path
    tstmtn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))
    
    --move through path
    tstmtn__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, RETRACT_HEIGHT, TRUE)

    -- retract path
    tstmtn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    UNLOCK_GROUP(math__bitmask(RBT_GRP),status)

    RETURN
  END t_pvert_ID


ROUTINE t_pvert_OD
  VAR
%define PAD_RADIUS 100
%defeval PAD_WIDTH 360*PAD_RADIUS*M_PI/180
%define PAD_LENGTH 20
%defeval PAD_SEPERATION 0*PAD_RADIUS*M_PI/180
%defeval PAD_START_DEG 130*PAD_RADIUS*M_PI/180
%define NO_OF_PADS 1
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD 1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%define TOOLING_STEP 90
%define LINKING_STEP 90
    i, status : INTEGER
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_VERT_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)

    --draw pads
    -- (frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))
    --flip drawing for drawing on OD
    tstcanv__flip_canvas

    --get raster lines
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)


    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstcanv__lines_to_vec_path(lines) ;

    frm = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(PAD_START_DEG,0,PAD_RADIUS,0,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT_DOWN,pose__set_config(DEFAULT_CONFIG))

    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod
    tstpth__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstmtn__init(tool, PAD_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
      --(lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstpth__planPath(lines, contours, OD_CORNER, ONEWAY, FALSE)
    --pause

    -- approach path
    tstmtn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    --move through path
    tstmtn__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT), TRUE)

    -- retract path
    tstmtn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    UNLOCK_GROUP(math__bitmask(RBT_GRP),status)

    RETURN
  END t_pvert_OD

ROUTINE t_pvert_pad
  VAR
%define PAD_RADIUS 100
%defeval PAD_WIDTH 60*PAD_RADIUS*M_PI/180
%define PAD_LENGTH 10
%defeval PAD_SEPERATION 90*PAD_RADIUS*M_PI/180
%defeval PAD_START_DEG 130*PAD_RADIUS*M_PI/180
%define NO_OF_PADS 4
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD 1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%defeval TOOLING_STEP 90
%defeval LINKING_STEP 90
    i, status : INTEGER
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_VERT_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)

    --draw pads
    -- (frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))
    --flip drawing for drawing on OD
    tstcanv__flip_canvas

    --get raster lines
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)


    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstcanv__lines_to_vec_path(lines) ;

    frm = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(PAD_START_DEG,0,PAD_RADIUS,0,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT_DOWN,pose__set_config(DEFAULT_CONFIG))

    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod
    tstpth__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstmtn__init(tool, PAD_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
      --(lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstpth__planPath(lines, contours, OD_CORNER, ONEWAY, FALSE)
    --pause

    -- approach path
    tstmtn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    --move through path
    tstmtn__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT), TRUE)

    -- retract path
    tstmtn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    UNLOCK_GROUP(math__bitmask(RBT_GRP),status)

    RETURN
  END t_pvert_pad

ROUTINE t_pvert_pdid
  VAR
%define PAD_RADIUS 100
%defeval PAD_WIDTH 60*PAD_RADIUS*M_PI/180
%define PAD_LENGTH 10
%defeval PAD_SEPERATION 90*PAD_RADIUS*M_PI/180
%defeval PAD_START_DEG 0*PAD_RADIUS*M_PI/180
%define NO_OF_PADS 4
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS-PAD_RADIUS)
%define PAD_IDOD -1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%defeval TOOLING_STEP 90
%defeval LINKING_STEP 90
    i, status : INTEGER
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_VERT_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)

    --draw pads
    -- (frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))

    --get raster lines
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)
    

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstcanv__lines_to_vec_path(lines) ;

    frm = POS(0,0,0,0,0,0,pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(PAD_START_DEG,0,PAD_RADIUS,0,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT_UP,pose__set_config(DEFAULT_CONFIG))

    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod
    tstpth__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstmtn__init(tool, PAD_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
      --(lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstpth__planPath(lines, contours, ID_CORNER, ONEWAY, FALSE)
    --pause

    -- approach path
    tstmtn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    --move through path
    tstmtn__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, RETRACT_HEIGHT, TRUE)

    -- retract path
    tstmtn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100,RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    UNLOCK_GROUP(math__bitmask(RBT_GRP),status)

    RETURN
  END t_pvert_pdid

BEGIN
%ifdef DEBUG_BUILD
  --(log_filename, show_date, show_debug, show_info)
  usrdis__new(LOG_NAME, FALSE, TRUE, TRUE)
  usrdis__clear_file
%endif

  -- t_hexagon
  -- t_pvert_ID
  -- t_pvert_OD
  -- t_pvert_pad
  t_pvert_pdid

  --clean up
  -- tstcanv__delete
  -- tstpth__delete

%ifdef DEBUG_BUILD
  usrdis__write_pipe
  usrdis__delete
%endif

END test_pth_mtn