PROGRAM test_pth_rot
%NOBUSYLAMP
%COMMENT = 'test motion paths'
%NOPAUSE = COMMAND + TPENABLE + ERROR


%ifeq DEBUG_BUILD FALSE
%undef DEBUG_BUILD
%endif

%ifeq DEBUG_PLOT_POINTS FALSE
%undef DEBUG_PLOT_POINTS
%endif

%define TOOLING_STEP 6
%define LINKING_STEP 10
%define TOOLING_SPEED 50
%define LINKING_SPEED 100

%defeval OD_CORNER LEFT_TOP
%defeval ID_CORNER LEFT_BOTTOM

%ifdef DEBUG_BUILD
%define SHOW_DEBUG FALSE
%define LOG_NAME 'RD:path_debug.DT'
%define PLOT_NAME 'RD:path_plot.DT'
%include display.c.klt
%endif

%define M_PI 3.14159

%include systemlib.types.klt
%include systemvars.klt
%include draw.klt
%include pose.const.klt
%include pathlib.klt
%include toolpath.structs.klt

--include motion type
%include defaultrot.klt
motion_type(MOTION_DATA_FILE)

VAR
  contours : PATH nodedata = t_VEC_PATH
  lines : PATH nodedata = t_VEC_PATH
  polygon : PATH nodedata = t_VERTEX
  ppath : PATH nodedata = t_POS_PATH
  path_plan : PATH nodedata = t_INTEGER
  pth : PATH nodedata = t_TOOLPATH

%from systemlib.klh %import VEC, VEC2D
%include pose.klh
%from math.klh %import bitmask
%from strings.klh %import i_to_s, p_to_s, pose_to_s
%from registers.klh %import set_real, set_int
%from draw.klh %import hexagon
%include pathlib.klh

--robot implementation
impl_motion_head(MOTION_DATA_FILE)

--polygon object
%class tstcanv('canvas.klc','canvas.klh')
--path object
%class tstrot('pathmake.klc','pathmake.klh','defaultrot.klt')
--motion object
%class tstrmn('motion.klc','motion.klh','defaultrot.klt')

%ifdef DEBUG_BUILD
-- user display log
%class usrdis('dispclass.klc','dispclass.klh')
%endif
%ifdef DEBUG_PLOT_POINTS
-- plot debug
%class usrplt('dispclass.klc','dispclass.klh')
%endif

ROUTINE clear_poly(p : PATH nodedata = t_VERTEX)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_poly

ROUTINE clear_list(p : PATH nodedata = t_INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(p)
    WHILE PATH_LEN(p) > 0 DO
		  DELETE_NODE(p,i,status)
      i = i - 1
	  ENDWHILE
  END clear_list

ROUTINE append_nodes(p : PATH nodedata = t_VERTEX; nodes : INTEGER)
  VAR
    i, status : INTEGER
  BEGIN
    FOR i=1 TO nodes DO
      APPEND_NODE(p,status)
    ENDFOR
  END append_nodes

ROUTINE draw_delta
  BEGIN
    --create polygon
    clear_poly(polygon)
    append_nodes(polygon, 8)   
    polygon[1].coords = VEC2D(-40,10)   
    polygon[2].coords = VEC2D(-10,40)   
    polygon[3].coords = VEC2D(0,0)
    polygon[4].coords = VEC2D(10,40)
    polygon[5].coords = VEC2D(40,10)
    polygon[6].coords = VEC2D(20,60)  
    polygon[7].coords = VEC2D(0,120)
    polygon[8].coords = VEC2D(-20,60)

  END draw_delta

ROUTINE draw_pad(width, length : REAL; seperation : REAL; no_of_pads : INTEGER; start : VECTOR)
  VAR
    i : INTEGER
  BEGIN
    --create polygon
    clear_poly(polygon)
    append_nodes(polygon, 4)

    FOR i=0 TO no_of_pads-1 DO
      polygon[1].coords = start + i*VEC2D(seperation, 0)
      polygon[2].coords = start + i*VEC2D(seperation, 0) + VEC2D(width,0)
      polygon[3].coords = start + i*VEC2D(seperation, 0) + VEC2D(width,length)
      polygon[4].coords = start + i*VEC2D(seperation, 0) + VEC2D(0,length)
      
      tstcanv__append_polygon(polygon)
    ENDFOR
  END draw_pad

ROUTINE t_rot_delta
  VAR
%define RASTER_ANGLE 0
%define PASS_OVERLAP 6
%define NO_WALLINES 1

%define RETRACT_RADIUS 20
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD 1
%define START_DIST 150
%define DRAW_RADIUS 80

%define TOOLING_SPEED 20
%define LINKING_SPEED 50
%define TOOLING_STEP 5*DRAW_RADIUS*M_PI/180
%define LINKING_STEP 10*DRAW_RADIUS*M_PI/180
    i, status : INTEGER
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    bbox : t_RECT
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)

    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)

    --draw delta
    draw_delta

    --raster polygon
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, RASTER_ANGLE, 1, NO_WALLINES, 0, PASS_OVERLAP)
     --append delta polygon into object
    tstcanv__append_polygon(polygon)
    --flip drawing for drawing on OD
    tstcanv__flip_canvas

    --raster poly
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)

    --get bounding box
    bbox = tstcanv__get_bounding_box_drawing

    -- get raster liens and contours
    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    tstcanv__lines_to_vec_path(lines) ; tstcanv__contours_to_vec_path(contours) ;

    frm = POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(0,START_DIST,DRAW_RADIUS,0,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT_DOWN, pose__set_config(DEFAULT_CONFIG))

    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod, doPathPlan
    tstrot__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstrmn__init(tool, DRAW_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
     -- (lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstrot__planPath(lines, contours, OD_CORNER, ONEWAY, FALSE)

    -- approach path
    tstrmn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,START_DIST+100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))
    
    --move through raster path
      --tool_speed, tool_step, link_speed, link_step, retract_hght, use_tool_spd
    tstrmn__movePoly(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT), TRUE)
    
    -- retract path
    tstrmn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,START_DIST+200,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    --move through contour

    -- --get lists
    -- tstrot__get_plan(path_plan)
    -- tstrot__get_segment(pth)

    UNLOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    RETURN
  END t_rot_delta


ROUTINE t_rot_OD
  VAR
%define PAD_RADIUS 100
%define PAD_WIDTH 360*PAD_RADIUS*M_PI/180
%define PAD_LENGTH 20
%defeval PAD_SEPERATION 0*PAD_RADIUS*M_PI/180
%define PAD_START_DEG 0*PAD_RADIUS*M_PI/180
%define PAD_START_DIST 100
-- set to 90 for vertical, or 135 for bevel
%define PAD_ANGLE 0
%define NO_OF_PADS 1
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD 1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%define TOOLING_STEP 90*PAD_RADIUS*M_PI/180
%define LINKING_STEP 90*PAD_RADIUS*M_PI/180
    i, status : INTEGER
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    bbox : t_RECT
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)

    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)

    --draw pads
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))
    --flip drawing for drawing on OD
    tstcanv__flip_canvas

    --get raster lines
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)

    --get bounding box
    bbox = tstcanv__get_bounding_box_drawing

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstcanv__lines_to_vec_path(lines) ;

    frm = POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(PAD_START_DEG,PAD_START_DIST,PAD_RADIUS,PAD_ANGLE,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT_DOWN, pose__set_config(DEFAULT_CONFIG))

%ifdef DEBUG_BUILD
    usrdis__print(DEBUG, 'draw origin: ' + p_to_s(origin))
    usrdis__print(DEBUG, 'tool frame: ' + p_to_s(tool))
%endif

    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod, doPathPlan
    tstrot__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstrmn__init(tool, PAD_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
     -- (lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstrot__planPath(lines, contours, OD_CORNER, ONEWAY, FALSE)

    -- approach path
    tstrmn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,PAD_START_DIST+100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))
    
    --move through path
      --tool_speed, tool_step, link_speed, link_step, retract_hght, use_tool_spd
    tstrmn__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT), TRUE)

    -- retract path
    tstrmn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,PAD_START_DIST+100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    -- --get lists
    -- tstrot__get_plan(path_plan)
    -- tstrot__get_segment(pth)

    UNLOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    RETURN
  END t_rot_OD


ROUTINE t_rot_ID
  VAR
%define PAD_RADIUS 100
%define PAD_WIDTH 360*PAD_RADIUS*M_PI/180
%define PAD_LENGTH 20
%defeval PAD_SEPERATION 0*PAD_RADIUS*M_PI/180
%define PAD_START_DEG 180*PAD_RADIUS*M_PI/180
%define PAD_START_DIST 100
-- set to -90 for vertical, or -135 for bevel
%define PAD_ANGLE 0
%define NO_OF_PADS 1
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD -1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%define TOOLING_STEP 45*PAD_RADIUS*M_PI/180
%define LINKING_STEP 45*PAD_RADIUS*M_PI/180
    i, status : INTEGER
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    bbox : t_RECT
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)

    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)

    --draw pads
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))
    
    --get raster lines
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)

    -- get bounding box
    bbox = tstcanv__get_bounding_box_drawing

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstcanv__lines_to_vec_path(lines) ;

    frm = POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(PAD_START_DEG,PAD_START_DIST,PAD_RADIUS,PAD_ANGLE,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT_UP, pose__set_config(DEFAULT_CONFIG))
    
    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod, doPathPlan
    tstrot__init(frm, cds, origin, PAD_IDOD, TRUE)
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstrmn__init(tool, PAD_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
     -- (lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstrot__planPath(lines, contours, ID_CORNER, ONEWAY, FALSE)
    
    --set path type
    tstrmn__set_prog_names(MOVE_DRYRUN)

    -- approach path
    tstrmn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100+PAD_START_DIST,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))
    
    --move through path
      --tool_speed, tool_step, link_speed, link_step, retract_hght, use_tool_spd
    tstrmn__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT), TRUE)

    -- retract path
    tstrmn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100+PAD_START_DIST,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    -- --get lists
    -- tstrot__get_plan(path_plan)
    -- tstrot__get_segment(pth)

    UNLOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)


    RETURN
  END t_rot_ID

ROUTINE t_rot_pad
  VAR
%define PAD_RADIUS 100
%define PAD_WIDTH 60*PAD_RADIUS*M_PI/180
%define PAD_LENGTH 20
%defeval PAD_SEPERATION 90*PAD_RADIUS*M_PI/180
%define PAD_START_DEG 0*PAD_RADIUS*M_PI/180
%define PAD_START_DIST 100
-- set to 90 for vertical, or 135 for bevel
%define PAD_ANGLE 0
%define NO_OF_PADS 3
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD 1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%define TOOLING_STEP 90*PAD_RADIUS*M_PI/180
%define LINKING_STEP 90*PAD_RADIUS*M_PI/180
    i, status : INTEGER
    origin : XYZWPR
    offst : XYZWPR
    drawfrm : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    bbox : t_RECT
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)

    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)

    --draw pads
      --drawing frame
    drawfrm = POS(0,0,0,0,0,0,(ZEROPOS(1).config_data))
      --initialize polygon object
        -- (frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__init(drawfrm, TRUE, RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
      --draw pad
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))
      --need to flip drawing for the image to not be mirrored
    tstcanv__flip_canvas

    --get raster lines
    -- (start_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__set_params(RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)

    --raster polygon
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)

    --get bounding box
    bbox = tstcanv__get_bounding_box_drawing

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstcanv__lines_to_vec_path(lines) ;

    frm = POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(PAD_START_DEG,PAD_START_DIST,PAD_RADIUS,PAD_ANGLE,0,0,pose__set_config(DEFAULT_CONFIG))
    offst = POS(0,PAD_START_DIST+100,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data))
    tool = POS(0,0,0,TOOL_ORIENT_DOWN, pose__set_config(DEFAULT_CONFIG))
    
    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod, doPathPlan
    tstrot__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstrmn__init(tool, PAD_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
      -- (lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstrot__planPath(lines, contours, OD_CORNER, ONEWAY, FALSE)

    -- approach path
    tstrmn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, offst)
    
    --move through path
      --tool_speed, tool_step, link_speed, link_step, retract_hght, use_tool_spd
    tstrmn__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT), TRUE)

    -- retract path
    tstrmn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, offst)

    -- --get lists
    -- tstrot__get_plan(path_plan)
    -- tstrot__get_segment(pth)

    UNLOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    RETURN
  END t_rot_pad

ROUTINE t_rot_pid
  VAR
%define PAD_RADIUS 100
%define PAD_WIDTH 60*PAD_RADIUS*M_PI/180
%define PAD_LENGTH 20
%defeval PAD_SEPERATION 90*PAD_RADIUS*M_PI/180
%define PAD_START_DEG 180*PAD_RADIUS*M_PI/180
%define PAD_START_DIST 100
-- set to -90 for vertical, or -135 for bevel
%define PAD_ANGLE 0
%define NO_OF_PADS 3
%define RETRACT_RADIUS 30
%defeval RETRACT_HEIGHT (RETRACT_RADIUS)
%define PAD_IDOD -1

%define RASTER_ANGLE 0
%define PASS_OVERLAP 10
%define CONTOUR_LINES 0

%define TOOLING_SPEED 100
%define LINKING_SPEED 200
%define TOOLING_STEP 45*PAD_RADIUS*M_PI/180
%define LINKING_STEP 45*PAD_RADIUS*M_PI/180
    i, status : INTEGER
    origin : XYZWPR
    frm : XYZWPR
    tool : XYZWPR
    bbox : t_RECT
    cds : t_COORD_SYS
  BEGIN
    --lock group 1
    LOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)

    --set frame
    pose__set_userframe(USER_FRAME_NO, RBT_GRP)
    pose__set_userframe(USER_FRAME_NO, ROT_GRP)

    pose__set_toolframe(TOOL_FRAME_NO, RBT_GRP)
    pose__set_toolframe(TOOL_FRAME_NO, ROT_GRP)

    --draw pads
    -- (frm, onboundary, raster_angle, dir, wall_lines, line_width, line_pitch)
    tstcanv__init(POS(0,0,0,0,0,0,(ZEROPOS(1).config_data)), TRUE, RASTER_ANGLE, 1, CONTOUR_LINES, 0, PASS_OVERLAP)
    draw_pad(PAD_WIDTH, PAD_LENGTH, PAD_SEPERATION, NO_OF_PADS, VEC2D(0,0))
    
    --get raster lines
    tstcanv__raster(PTH_LINETO)
    --trace
    tstcanv__trace(PTH_LINETO)

    -- get bounding box
    bbox = tstcanv__get_bounding_box_drawing

    paths__clear_vecpath(lines) ; paths__clear_vecpath(contours) ;
    --get lines from object
    tstcanv__lines_to_vec_path(lines) ;

    frm = POS(0,0,0,0,0,0, pose__set_config(DEFAULT_CONFIG))
    cds = paths__new_coord_sys(PTH_CYLINDER, VERT_AXES)
    origin = POS(PAD_START_DEG,PAD_START_DIST,PAD_RADIUS,PAD_ANGLE,0,0,pose__set_config(DEFAULT_CONFIG))
    tool = POS(0,0,0,TOOL_ORIENT_UP, pose__set_config(DEFAULT_CONFIG))
    
    --initialize pathclass
      -- coord frm, coordinate system, part origin, idod, doPathPlan
    tstrot__init(frm, cds, origin, PAD_IDOD, TRUE)
    --intialize motion friend class
      --tool offset, reference radius, interpolate flag, program type, tool_speed, link_speed, USESETSPEED, tool_step, link_step, INDEGREES
    tstrmn__init(tool, PAD_RADIUS, TRUE, MOVE_DRYRUN, TOOLING_SPEED, LINKING_SPEED, TRUE, TOOLING_STEP, LINKING_STEP, TRUE)

    --generate path
      -- (lines, contours, start_corner, raster_type, poly_depend, contourFirst)
    tstrot__planPath(lines, contours, ID_CORNER, ONEWAY, FALSE)
    
    --set path type
    tstrmn__set_prog_names(MOVE_DRYRUN)

    -- approach path
    tstrmn__run_approach_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100+PAD_START_DIST,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))
    
    --move through path
      --tool_speed, tool_step, link_speed, link_step, retract_hght, use_tool_spd
    tstrmn__movePolyArc(TOOLING_SPEED, TOOLING_STEP, LINKING_SPEED, LINKING_STEP, -1*(RETRACT_HEIGHT), TRUE)

    -- retract path
    tstrmn__run_retract_path(LINKING_SPEED, LINKING_STEP, (cds.system), PAD_IDOD, origin, POS(0,100+PAD_START_DIST,-1*RETRACT_HEIGHT,0,0,0,(ZEROPOS(1).config_data)))

    -- --get lists
    -- tstrot__get_plan(path_plan)
    -- tstrot__get_segment(pth)

    UNLOCK_GROUP(math__bitmask(RBT_GRP) OR math__bitmask(ROT_GRP),status)


    RETURN
  END t_rot_pid

BEGIN
%ifdef DEBUG_BUILD
  --(log_filename, show_date, show_debug, show_info)
  usrdis__new(LOG_NAME, FALSE, TRUE, TRUE)
  usrdis__clear_file
%endif
%ifdef DEBUG_PLOT_POINTS
  usrplt__new(PLOT_NAME, FALSE, TRUE, TRUE)
  usrplt__clear_file
%endif

  --t_rot_delta
  --t_rot_OD
  --t_rot_ID
  --t_rot_pad
  t_rot_pid

  -- --clean up
  -- tstcanv__delete
  -- tstrot__delete

%ifdef DEBUG_BUILD
  usrdis__write_pipe
  usrdis__delete
%endif
%ifdef DEBUG_PLOT_POINTS
  usrplt__write_pipe
  usrplt__delete
%endif

END test_pth_rot